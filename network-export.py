import json

import msal
import requests

# Define the necessary parameters. First 2 are from the Entra portal.
CLIENT_ID = "338ab182-1608-4097-9b95-7497ccf7319d"
AUTHORITY = "https://login.microsoftonline.com/f14ae0cd-8ed1-4e54-b2e2-67a0429df851"

# Do not use 'https://login.microsoftonline.com/common' for the scope here.
SCOPE = ["https://api.yammer.com/user_impersonation"]


# Create a public client application
app = msal.PublicClientApplication(CLIENT_ID, authority=AUTHORITY)


def export(token, query_params=None):

    headers = {
        "Authorization": f"Bearer {token}",
    }

    response = requests.get(
        "https://www.yammer.com/api/v1/export",
        headers=headers,
        timeout=180,
        params=query_params,
    )

    return response


def main():
    print("Getting a token...")

    # Setup the device flow as it seems to be the current recommendation for CLI apps.
    flow = app.initiate_device_flow(scopes=SCOPE)
    if "user_code" not in flow:
        raise ValueError(
            f"Failed to create device flow. Error: {json.dumps(flow, indent=4)}"
        )

    print(flow["message"])

    # Get the token using the device flow
    result = app.acquire_token_by_device_flow(flow)

    if "access_token" in result:
        print("Access token acquired.")

        query_params = {
            "since": "2020-02-09T00:00:00+00:00",  # Start
            "until": "2025-02-09T00:00:00+00:00",  # End
        }

        data = export(result["access_token"], query_params)

        # Save the response to disk if it's a ZIP file using the filename generated by Engage.
        if data.headers.get("Content-Type") == "application/zip":
            content_disposition = data.headers.get("Content-Disposition")
            if content_disposition:
                filename = content_disposition.split("filename=")[1].strip('"')
                with open(filename, "wb") as file:
                    file.write(data.content)
                print(f"Engage export saved as {filename}.")
            else:
                print("Content-Disposition is missing. A filename was expected.")
        else:
            print(
                f"Response is not a ZIP file. Content-Type is {data.headers.get('Content-Type')}."
            )
    else:
        print("Failed to acquire token:")
        print(result.get("error"))
        print(result.get("error_description"))
        print(result.get("correlation_id"))


if __name__ == "__main__":
    main()
