import sys
import json
import argparse

from datetime import datetime
from dateutil import parser
from dateutil.parser import ParserError

import msal
import requests

# Define the necessary parameters. First 2 are from the Entra portal.
CLIENT_ID = "338ab182-1608-4097-9b95-7497ccf7319d"
AUTHORITY = "https://login.microsoftonline.com/f14ae0cd-8ed1-4e54-b2e2-67a0429df851"

# Do not use 'https://login.microsoftonline.com/common' for the scope here.
SCOPE = ["https://api.yammer.com/user_impersonation"]


# Create a public client application
app = msal.PublicClientApplication(CLIENT_ID, authority=AUTHORITY)


def generate_start_date(start_date) -> str:
    """
    Converts a given start date string into a specific ISO 8601 formatted string.

    Args:
        start_date (str): The start date string to be converted.

    Returns:
        str: The start date in ISO 8601 format (YYYY-MM-DDTHH:MM:SS+00:00).
    """
    return parser.parse(start_date).strftime("%Y-%m-%dT%H:%M:%S+00:00")


def generate_end_date() -> str:
    """
    Generates the current date and time in ISO 8601 format with UTC offset.

    Returns:
        str: The current date and time in the format "%Y-%m-%dT%H:%M:%S+00:00".
    """
    return datetime.now().strftime("%Y-%m-%dT%H:%M:%S+00:00")


def export(token, query_params=None):
    """
    Export data from the Viva Engage (Yammer) API.

    This function sends a GET request to the Yammer API to export data using the provided
    authentication token and optional query parameters.

    Args:
        token (str): The authentication token for the Yammer API.
        query_params (dict, optional): A dictionary of query parameters to include in the request. Defaults to None.

    Returns:
        requests.Response: The response object from the GET request to the Yammer API.
    """

    headers = {
        "Authorization": f"Bearer {token}",
    }

    response = requests.get(
        "https://www.yammer.com/api/v1/export",
        headers=headers,
        timeout=180,
        params=query_params,
    )

    return response


def main(params):
    # Validate the start date.
    try:
        start = generate_start_date(params.start_date)
    except ParserError as e:
        sys.exit(
            f"Check that a valid start_date argument was specified: {e}. Date needs to be parseable by dateutil."
        )

    # Generate the end date based on current time.
    end = generate_end_date()

    print(f"Start:\t{start}")
    print(f"End:\t{end}")

    # Setup the device flow as it seems to be the current recommendation for CLI apps.
    flow = app.initiate_device_flow(scopes=SCOPE)
    if "user_code" not in flow:
        raise ValueError(
            f"Failed to create device flow. Error: {json.dumps(flow, indent=4)}"
        )

    # Print the auth banner for the user.
    print(flow["message"])

    # Get the token using the device flow
    print("Getting a token...")
    result = app.acquire_token_by_device_flow(flow)

    if "access_token" in result:
        print("Access token acquired.")

        query_params = {
            "since": start,  # Start
            "until": end,  # End
        }

        response = export(result["access_token"], query_params)

        if response.status_code == 200:

            # Save the response to disk if it's a ZIP file using the filename generated by Engage.
            if response.headers.get("Content-Type") == "application/zip":
                content_disposition = response.headers.get("Content-Disposition")
                if content_disposition:
                    filename = content_disposition.split("filename=")[1].strip('"')
                    with open(filename, "wb") as file:
                        file.write(response.content)
                    print(f"Engage export saved as {filename}.")
                else:
                    print("Content-Disposition is missing. A filename was expected.")
            else:
                print(
                    f"Response is not a ZIP file. Content-Type is {response.headers.get('Content-Type')}."
                )
        elif response.status_code == 401:
            print(
                "Failed to authorize the export request. Check that the user has the necessary permissions to perform a network export."
            )
    else:
        print("Failed to acquire token:")
        print(result.get("error"))
        print(result.get("error_description"))
        print(result.get("correlation_id"))


if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser(
        description="Interactively authenticates an admin account and exports content from a Viva Engage (Yammer) network."
    )

    arg_parser.add_argument(
        "start_date",
        type=str,
        help="Start date for the export. Format: 2020-04-24.",
    )

    args = arg_parser.parse_args()

    main(args)
